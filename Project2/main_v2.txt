#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <iomanip>
#include <algorithm>
#include <queue>
#include <vector>
#include "process.h"
#include "memory.h"

struct process_info{
	char pid;
	int burst_left; 
	int memory;
};

struct page_info{
	unsigned short page_num;
	int reference_count;
	int time_from_last_access;
};

bool SortProcessByPID(	const process_info &p1, 
								const process_info &p2);
void NonContiguousSimulation(	std::vector <Process> all_process	);
void ContiguousSimulation(	std::vector <Process> all_process	);

void VirtualMemorySimulation(int F, std::vector<int> reference_pages, std::string algorithm);

int LRU(int F, page_info* phys_memory);
int LFU(int F, page_info* phys_memory);
int OPT(int F, std::vector<int> reference_pages);

void PhysicalMemoryPrint(int F, page_info* phys_memory);

int main(int argc, char const *argv[])
{

#if 0
	if(argc!=3){
		std::cerr<<"Usage: a.out arg1 arg2\n";
	}
#endif
	std::vector< std::pair<int, int> > A_bursts;
	A_bursts.push_back(std::make_pair(0,350));
	A_bursts.push_back(std::make_pair(400,50));
	Process A('A', 45, A_bursts);

	std::vector< std::pair<int, int> > B_bursts;
	B_bursts.push_back(std::make_pair(0,2650));
	Process B('B', 28, B_bursts);

	std::vector< std::pair<int, int> > C_bursts;
	C_bursts.push_back(std::make_pair(0,950));
	C_bursts.push_back(std::make_pair(1100,100));
	Process C('C', 58, C_bursts);

	std::vector< std::pair<int, int> > D_bursts;
	D_bursts.push_back(std::make_pair(0,650));
	D_bursts.push_back(std::make_pair(1350,450));
	Process D('D', 86, D_bursts);

	std::vector< std::pair<int, int> > E_bursts;
	E_bursts.push_back(std::make_pair(0,1400));
	Process E('E', 14, E_bursts);

	std::vector< std::pair<int, int> > F_bursts;
	F_bursts.push_back(std::make_pair(100,380));
	F_bursts.push_back(std::make_pair(500,475));
	Process F('F', 24, F_bursts);

	std::vector< std::pair<int, int> > G_bursts;
	G_bursts.push_back(std::make_pair(435,815));
	Process G('G', 13, G_bursts);	

	std::vector< std::pair<int, int> > J_bursts;
	J_bursts.push_back(std::make_pair(550,900));
	Process J('J', 46, J_bursts);	


	std::vector <Process> all_process;
	all_process.push_back(A);
	all_process.push_back(B);
	all_process.push_back(C);
	all_process.push_back(D);
	all_process.push_back(E);
	all_process.push_back(F);
	all_process.push_back(G);
	all_process.push_back(J);

#if 0
	NonContiguousSimulation( all_process );
	ContiguousSimulation( all_process );
#endif

	std::vector<int> reference_pages;
#if 0
	reference_pages.push_back(7);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(1);
	reference_pages.push_back(1);
	reference_pages.push_back(8);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(3);
	reference_pages.push_back(6);
	reference_pages.push_back(6);
	reference_pages.push_back(6);
	reference_pages.push_back(6);
	reference_pages.push_back(6);
	reference_pages.push_back(6);
	reference_pages.push_back(6);
	reference_pages.push_back(7);
#endif
	reference_pages.push_back(1);
	reference_pages.push_back(2);
	reference_pages.push_back(3);
	reference_pages.push_back(2);
	reference_pages.push_back(1);
	reference_pages.push_back(1);
	reference_pages.push_back(3);
	reference_pages.push_back(4);
	reference_pages.push_back(4);
	reference_pages.push_back(2);
	reference_pages.push_back(4);
	reference_pages.push_back(5);
	reference_pages.push_back(7);
	reference_pages.push_back(2);
	reference_pages.push_back(2);
	reference_pages.push_back(8);
	reference_pages.push_back(3);
	reference_pages.push_back(2);
	reference_pages.push_back(2);
	reference_pages.push_back(1);
	reference_pages.push_back(1);

	VirtualMemorySimulation(3, reference_pages, "LRU");
	return 0;
}

void RemoveFinishedProcess(
	std::vector <process_info> &running_process){
	std::vector <process_info>::iterator process_itr=running_process.begin();
	while(process_itr!=running_process.end()){
		if(process_itr->burst_left==0)running_process.erase(process_itr);
		else ++process_itr;
	}
}

#if 0
void ContinuousSimulation(	std::vector <Process> all_process	){


	Memory my_memory;
	std::vector <process_info> running_process;
	long clock_time = 0;
	std::vector<Process> arrived_process;


	while(clock_time<5000){
		arrived_process.clear();

		//add new process
			//nextfit bestfit worstfit
			//defragmentation
				//time postpone
		//burst
		//remove finished process from memory
	}

}
#endif

//for next fit, the memory class always keep track of the last process that 
//get added in. When duing next fit, search that last process in the memory
//space and go to the tail of that memory. Start to search for a space to 
//fit in memory (also remember this starting point in nextfit search function)
//when hit memory bottom, go back to top and search until the starting point
//if none, check defragmentation and then add the process. 

void ContiguousSimulation(	std::vector <Process> all_process	){


	Memory my_memory;
	std::vector <process_info> running_process;
	int clock_time = 0;
	std::vector<process_info> arrived_process;


	while(clock_time<5000){

		arrived_process.clear();
		for(unsigned int i=0; i<all_process.size(); ++i){

			std::pair<int, int> tmp_proc_burst = 
				all_process[i].CheckBurstArrival(clock_time);

			if(tmp_proc_burst.first!=-1){
				process_info the_process;
				the_process.pid = all_process[i].PID();
				the_process.burst_left = tmp_proc_burst.second;
				the_process.memory = all_process[i].GetMemory();
				arrived_process.push_back(the_process);
				std::cout<<"process "<<the_process.pid<<" arrived: memory "<<the_process.memory<<std::endl;
			}

		}
		std::sort(arrived_process.begin(), arrived_process.end(), SortProcessByPID);

		//add new process
		for(unsigned int i=0; i<arrived_process.size(); ++i){
			//have enough space
			if(arrived_process[i].memory<=my_memory.FreeSpace()){
				int index = my_memory.BestWorstFit(arrived_process[i].memory, "BEST");
				if(index != -1){
					my_memory.AddProcessCont(arrived_process[i].pid, index, arrived_process[i].memory);
					running_process.push_back(arrived_process[i]);
					std::cout<<clock_time<<"ms: added process "<<arrived_process[i].pid<<std::endl;
					my_memory.MemoryPrint();
				}else{//defragmentation
					std::cout<<clock_time<<"ms: defragmentation "<<arrived_process[i].pid<<std::endl;
					int t_pos = my_memory.Defragmentation();
					for(unsigned int j=0; j<all_process.size(); ++j){
						all_process[j].Postpone(clock_time, t_pos);
					}
					clock_time+=t_pos;
					index = my_memory.BestWorstFit(arrived_process[i].memory, "BEST");
					my_memory.AddProcessCont(arrived_process[i].pid, index, arrived_process[i].memory);
					running_process.push_back(arrived_process[i]);					
					std::cout<<clock_time<<"ms: added process "<<arrived_process[i].pid<<std::endl;
					my_memory.MemoryPrint();
				}
			}else{//not enough space
				std::cout<<clock_time<<"ms: skipped process "<<arrived_process[i].pid<<std::endl;
			}
			
		}


		++clock_time;	
		//burst
		for(unsigned int i=0; i<running_process.size(); ++i){
			running_process[i].burst_left--;
		}

		//remove finished process from memory
		std::vector<process_info>::iterator proc_itr = running_process.begin();
		while(proc_itr!=running_process.end()){
			if(proc_itr->burst_left==0){
				my_memory.RemoveProcess(proc_itr->pid);
				std::cout<<clock_time<<"ms: removed process "<<proc_itr->pid<<std::endl;
				running_process.erase(proc_itr);
				my_memory.MemoryPrint();
			}else{
				++proc_itr;
			}
		}	

	}

}

void NonContiguousSimulation(	std::vector <Process> all_process	){


	Memory my_memory;
	std::vector <process_info> running_process;
	int clock_time = 0;
	std::vector<process_info> arrived_process;


	while(clock_time<5000){

		arrived_process.clear();
		for(unsigned int i=0; i<all_process.size(); ++i){

			std::pair<int, int> tmp_proc_burst = 
				all_process[i].CheckBurstArrival(clock_time);

			if(tmp_proc_burst.first!=-1){
				process_info the_process;
				the_process.pid = all_process[i].PID();
				the_process.burst_left = tmp_proc_burst.second;
				the_process.memory = all_process[i].GetMemory();
				arrived_process.push_back(the_process);
				std::cout<<"process "<<the_process.pid<<" arrived: memory "<<the_process.memory<<std::endl;
			}

		}
		std::sort(arrived_process.begin(), arrived_process.end(), SortProcessByPID);

		//add new process
		for(unsigned int i=0; i<arrived_process.size(); ++i){
			//have enough space
			if(arrived_process[i].memory<=my_memory.FreeSpace()){
				my_memory.AddProcessNonCont(arrived_process[i].pid, 
						arrived_process[i].memory);
				running_process.push_back(arrived_process[i]);
				std::cout<<clock_time<<"ms: added process "<<arrived_process[i].pid<<std::endl;
				my_memory.MemoryPrint();
			}else{//not enough space
				std::cout<<clock_time<<"ms: skipped process "<<arrived_process[i].pid<<std::endl;
			}
			
		}

		//burst
		for(unsigned int i=0; i<running_process.size(); ++i){
			running_process[i].burst_left--;
		}

		++clock_time;	
		//remove finished process from memory
		std::vector<process_info>::iterator proc_itr = running_process.begin();
		while(proc_itr!=running_process.end()){
			if(proc_itr->burst_left==0){
				my_memory.RemoveProcess(proc_itr->pid);
				std::cout<<clock_time<<"ms: removed process "<<proc_itr->pid<<std::endl;
				running_process.erase(proc_itr);
				my_memory.MemoryPrint();
			}else{
				++proc_itr;
			}
		}	

	}

}

bool SortProcessByPID(	const process_info &p1, 
								const process_info &p2){
	return p1.pid < p2.pid;
}


//Least Recently Used
void VirtualMemorySimulation(int F, std::vector<int> reference_pages, std::string algorithm){
	page_info phys_memory[F];
	for(int i=0; i<F; ++i){
		phys_memory[i].reference_count=-1;
	}
	while(reference_pages.size()!=0){
		bool page_fault = true;//	
		bool added = false;		
		for(int i=0; i<F; ++i){//
			if(phys_memory[i].reference_count==-1){//empty physical memory
				
				if(added)break;

				phys_memory[i].page_num=reference_pages[0];
				phys_memory[i].reference_count=1;
				phys_memory[i].time_from_last_access=0;	
				page_fault=false;
				std::cout<<"referencing page "<<reference_pages[0]<<" ";
				PhysicalMemoryPrint(F, phys_memory);
				std::cout<<"PAGE FAULT: no victim page"<<std::endl;
				break;
			}else if(phys_memory[i].page_num==reference_pages[0]){//match

				phys_memory[i].reference_count++;
				phys_memory[i].time_from_last_access=0;
				page_fault=false;
				added = true;

			}else{
				phys_memory[i].time_from_last_access++;
			}
		}
		if(page_fault){//page fault
			std::cout<<"referencing page "<<reference_pages[0]<<" ";
			PhysicalMemoryPrint(F, phys_memory);
			
			int index;
			if(algorithm=="LRU"){

				index = LRU(F, phys_memory);
				std::cout<<"PAGE FAULT: victim page "<<phys_memory[index].page_num<<std::endl;
				phys_memory[index].page_num=reference_pages[0];
				phys_memory[index].reference_count=1;
				phys_memory[index].time_from_last_access=0;
			
			}else if(algorithm=="LFU"){
				index = LFU(F, phys_memory);
				std::cout<<"PAGE FAULT: victim page "<<phys_memory[index].page_num<<std::endl;
				phys_memory[index].page_num=reference_pages[0];
				phys_memory[index].reference_count=1;
				phys_memory[index].time_from_last_access=0;
			}else{//OPT
				index = OPT(F, reference_pages);
				std::cout<<"PAGE FAULT: victim page "<<phys_memory[index].page_num<<std::endl;
				phys_memory[index].page_num=reference_pages[0];
				phys_memory[index].reference_count=1;
				phys_memory[index].time_from_last_access=0;
			}

			
		}

		reference_pages.erase(reference_pages.begin());
	}
}

int LRU(int F, page_info* phys_memory){
	int index=0;
	long page=65537;
	int least_recent=0;
	for(int i=0; i<F; ++i){
		if(phys_memory[i].time_from_last_access > least_recent){
			index = i;
			least_recent = phys_memory[i].time_from_last_access;
			page=phys_memory[i].page_num;
		}else if(phys_memory[i].time_from_last_access == least_recent){
			if(phys_memory[i].page_num<page){
				index=i;
				page=phys_memory[i].page_num;
			}
		}
	}
	return index;
}

int LFU(int F, page_info* phys_memory){
	int index=0;
	long page = 65537;
	int least_freq=-1;
	for(int i=0; i<F; ++i){
		if( (phys_memory[i].reference_count < least_freq) || least_freq==-1){
			index = i;
			least_freq = phys_memory[i].reference_count;
			page=phys_memory[i].page_num;
		}else if(phys_memory[i].reference_count == least_freq){
			if(phys_memory[i].page_num<page){
				index=i;
				page=phys_memory[i].page_num;
			}			
		}
			
	}
	return index;
}

int OPT(int F, std::vector<int> reference_pages){
	return 0;
}

void PhysicalMemoryPrint(int F, page_info* phys_memory){
	std::cout<<"[ ";
	for(int i=0; i<F; ++i){
		if(phys_memory[i].reference_count==-1){
			std::cout<<".";
		}else{
			std::cout<<phys_memory[i].page_num;
		}
		std::cout<<" ";
	}
	std::cout<<"]";
}